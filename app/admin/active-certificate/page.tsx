// File: components/pages/ActiveCertificatePage.tsx

"use client";

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { format, isValid } from "date-fns";
import { useRouter } from "next/navigation";
import { AppDispatch, RootState } from "@/lib/redux/store";
import { DataTable } from "@/components/admin/DataTable";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Download, Loader2, Trash2 } from "lucide-react";
import {
  fetchGeneratedCertificates,
  deleteCertificate,
  GeneratedCertificate,
} from "@/lib/redux/features/memberCertificates/memberCertificatesSlice";
import { Member } from "@/lib/redux/features/members/membersSlice";

const safeFormatDate = (dateString: string | undefined) => {
  if (!dateString) return "N/A";
  const date = new Date(dateString);
  return isValid(date) ? format(date, "dd-MM-yyyy, hh:mm a") : "Invalid Date";
};

const MemberDetailsCell = ({ member }: { member: Member | undefined }) => {
  if (!member) {
    return <div className="text-red-500">Member Data Missing</div>;
  }
  return (
    <div>
      <p className="font-semibold">{member.fullName || "N/A"}</p>
      <p className="text-xs text-gray-500">
        Reg: {member.registrationNo || "N/A"}
      </p>
    </div>
  );
};

export default function ActiveCertificatePage() {
  const dispatch = useDispatch<AppDispatch>();
  const { generatedCertificates, listStatus, actionStatus } = useSelector(
    (state: RootState) => state.memberCertificates
  );

  const [downloadingId, setDownloadingId] = useState<string | null>(null);

  useEffect(() => {
    if (listStatus === "idle") {
      dispatch(fetchGeneratedCertificates());
    }
  }, [dispatch, listStatus]);

  const handleDelete = (certId: string) => {
    if (confirm("Are you sure you want to delete this certificate record?")) {
      dispatch(deleteCertificate(certId));
    }
  };

  const handleDownloadCertificate = async (
    certificate: GeneratedCertificate
  ) => {
    setDownloadingId(certificate._id);
    try {
      const response = await fetch(
        `/api/admin/member-certificates/download/${certificate._id}`
      );
      if (!response.ok) {
        throw new Error("Network response was not ok.");
      }
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      const fileName = `Certificate-${certificate.member?.registrationNo || certificate.certificateNo}.pdf`;
      a.download = fileName;
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Download failed:", error);
      alert("Failed to download certificate. Please try again.");
    } finally {
      setDownloadingId(null);
    }
  };

  const columns = [
    {
      key: "sr",
      label: "Sr.No.",
      render: (_: GeneratedCertificate, index: number) => index + 1,
    },
    {
      key: "details",
      label: "Member Details",
      render: (row: GeneratedCertificate) => (
        <MemberDetailsCell member={row.member} />
      ),
    },
    {
      key: "programName",
      label: "Program Name",
      render: (row: GeneratedCertificate) => row.programName || "N/A",
    },
    {
      key: "generatedBy",
      label: "Generated By",
      render: (row: GeneratedCertificate) =>
        (row.generatedBy && row.generatedBy.name) || "N/A",
    },
    {
      key: "actions",
      label: "Actions",
      render: (row: GeneratedCertificate) => {
        const isDownloading = downloadingId === row._id;
        return (
          <div className="flex flex-col gap-1.5 items-stretch">
            <Button
              size="sm"
              variant="outline"
              onClick={() => handleDownloadCertificate(row)}
              disabled={isDownloading}
            >
              {isDownloading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Download className="mr-2 h-4 w-4" />
              )}
              {isDownloading ? "Downloading..." : "Download"}
            </Button>
            <Button
              size="sm"
              variant="destructive"
              onClick={() => handleDelete(row._id)}
              disabled={actionStatus === "loading"}
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
        );
      },
    },
  ];

  const dataToShow = generatedCertificates || [];

  return (
    <DataTable
      title="All Generated Member Certificates"
      columns={columns}
      data={dataToShow}
      totalEntries={dataToShow.length}
      isLoading={listStatus === "loading"}
    />
  );
}
